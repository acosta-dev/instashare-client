stages:
  - build_production
  - deploy_production

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build_production
  services:
    - docker:dind
  before_script:
    # Create a tag using the commit and the job ID
    - export TAG=${CI_COMMIT_SHORT_SHA}-${CI_JOB_ID}

    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    # Build and push the real image
    - docker build -t $CI_REGISTRY_IMAGE:$TAG .
    - docker push $CI_REGISTRY_IMAGE:$TAG

    # Retag and push the image to have a latest tag
    - docker tag $CI_REGISTRY_IMAGE:$TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

deploy:
  image: alpine:latest
  stage: deploy_production
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$ID_RSA" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

  script:
    # Login into registry
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # Update container
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd ~/docker/insta-share/client &&  docker-compose pull && docker-compose up -d && docker image prune -af"
  only:
    - main
